# -*- coding: utf-8 -*-
"""control_gate_sequences.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZkhgNTkGAeseLl454Pf9eJEY17Z2zOdt
"""

from pulser import Pulse, Sequence
from pulser.devices import Chadoq2
from pulser.waveforms import BlackmanWaveform
from gate_pulses import h_pulse
import numpy as np

def cz_seq(seq, control_qubit_id, target_qubit_id, blockade_radius=8, pi_pulse_duration=200):

  # pi pulse definition
  pi_wf = BlackmanWaveform(pi_pulse_duration, np.pi)
  pi_pulse = Pulse.ConstantDetuning(amplitude=pi_wf, detuning=0, phase=0, post_phase_shift=0)

  # two pi pulse definiton
  max_val = Chadoq2.rabi_from_blockade(blockade_radius)
  two_pi_wf = BlackmanWaveform.from_max_val(max_val=max_val, area=2*np.pi)
  two_pi_pulse = Pulse.ConstantDetuning(two_pi_wf, detuning=0, phase=0, post_phase_shift=0)

  # CZ sequence
  seq.target(control_qubit_id, "rydberg")
  seq.add(pi_pulse, "rydberg")
  seq.target(target_qubit_id, "rydberg")
  seq.add(two_pi_pulse, "rydberg")
  seq.target(control_qubit_id, "rydberg")
  seq.add(pi_pulse, "rydberg")

  return seq


def cx_seq(seq, control_qubit_id, target_qubit_id, blockade_radius=8, pi_pulse_duration=200):

  # pi pulse definition
  pi_wf = BlackmanWaveform(pi_pulse_duration, np.pi)
  pi_pulse = Pulse.ConstantDetuning(amplitude=pi_wf, detuning=0, phase=0, post_phase_shift=0)

  # two pi pulse definiton
  max_val = Chadoq2.rabi_from_blockade(blockade_radius)
  two_pi_wf = BlackmanWaveform.from_max_val(max_val=max_val, area=2*np.pi)
  two_pi_pulse = Pulse.ConstantDetuning(two_pi_wf, detuning=0, phase=0, post_phase_shift=0)

  # CX sequence
  ## Step - 1: H gate on target qubit
  seq.target(target_qubit_id, "digital")
  seq.add(h_pulse(), "digital")
  ## Step - 2: CZ sequence
  seq.target(control_qubit_id, "rydberg")
  seq.add(pi_pulse, "rydberg")
  seq.target(target_qubit_id, "rydberg")
  seq.add(two_pi_pulse, "rydberg")
  seq.target(control_qubit_id, "rydberg")
  seq.add(pi_pulse, "rydberg")
  ## Step - 3: H gate on target qubit
  seq.target(target_qubit_id, "digital")
  seq.add(h_pulse(), "digital")

  return seq